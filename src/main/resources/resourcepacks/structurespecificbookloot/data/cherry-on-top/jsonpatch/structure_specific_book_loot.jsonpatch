@version "1";
@target [
    {
        "path": {
            "start": "loot_table/archaeology",
            "end": ".json"
        }
    },
    {
        "path": {
            "start": "loot_table/chests",
            "end": ".json"
        }
    },
    {
        "path": {
            "start": "loot_table/entities",
            "end": ".json"
        }
    },
    {
        "path": {
            "start": "loot_table/equipment",
            "end": ".json"
        }
    },
    {
        "path": {
            "start": "loot_table/gameplay",
            "end": ".json"
        }
    }
];
import "cherry-on-top:cot_patcher_lib" as cotlib;

foreach (configEntry in cherryontop_config.enchantedBookLootImprovements.enchantmentStructureMap) {
    val entryArray = strings.split(configEntry, "!");

    if (cotlib.arraySize(entryArray) != 2) {
        debug.throw("Invalid structure specific loot entry " + configEntry + ": Entry must be in format enchantment;weight,...,enchantment;weight!location;chance,...,location;chance");
    } else {
        val locations = strings.split(entryArray[1], ",");

        foreach (locationEntry in locations) {
            val locationEntryArray = strings.split(locationEntry, ";");

            if (cotlib.arraySize(locationEntryArray) != 2) {
                debug.throw("Invalid location entry " + locationEntry + " in structure specific loot entry " + configEntry + ": Location entry must be in format location;chance");
            } else {
                val segmentedLocation = strings.split(locationEntryArray[0], "/");

                var path = "";
                if (cotlib.arraySize(segmentedLocation) > 2) {
                    val pathArray = arrays.slice(segmentedLocation, 1, cotlib.arraySize(segmentedLocation));
                    path = strings.join(pathArray, "/") + ".json";
                }
                else {
                    path = segmentedLocation[1] + ".json";
                }

                if (strings.contains(_target, path)) {
                    val enchantments = strings.split(entryArray[0], ",");
                    val chance = cotlib.strToInt(locationEntryArray[1], configEntry) / 100;

                    var pool = {
                        "rolls": 1.0,
                        "entries": [],
                        "conditions": [
                            {
                                "condition": "minecraft:random_chance",
                                "chance": chance
                            }
                        ]
                    };

                    foreach (enchantmentEntry in enchantments) {
                        val enchantmentEntryArray = strings.split(enchantmentEntry, ";");

                        if (cotlib.arraySize(enchantmentEntryArray) != 2) {
                            debug.throw("Invalid enchantment entry " + enchantmentEntry + " in structure specific loot entry " + configEntry + ": Enchantment entry must be in format enchantment;weight");
                        } else {
                            val enchantment = enchantmentEntryArray[0];
                            val weight = cotlib.strToInt(enchantmentEntryArray[1], configEntry);

                            val poolEntry = {
                                "type": "minecraft:item",
                                "name": "minecraft:book",
                                "weight": weight,
                                "functions": [
                                    {
                                        "function": "minecraft:enchant_randomly",
                                        "options": enchantment
                                    }
                                ]
                            };

                            pool.entries = arrays.push(pool.entries, poolEntry);
                        }
                    }

                    $pools = arrays.push($pools, pool);
                }
            }
        }
    }
}